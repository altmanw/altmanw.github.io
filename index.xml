<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Will Altman</title>
    <link>https://willaltman.tech/</link>
    <description>Recent content on Will Altman</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://willaltman.tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Cylinder Primitive</title>
      <link>https://willaltman.tech/webgl/primitives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/webgl/primitives/</guid>
      <description>&lt;p&gt;Cylinders are represented as a stack of circles, with each circle&amp;rsquo;s vertices connected with those above and below it. The radius of each circle does not have to be equivalent. In the case where they are not, the object is considered a cone. The vertices are found by dividing the &lt;b&gt;360 degrees&lt;/b&gt; of the circle by &lt;b&gt;n slices&lt;/b&gt; to find the angle between each vertex. Then using this and the length of the radius, the vertices are placed. Then, for the top and bottom circles, triangles are generated by connecting each vertex to its next neighbor, then those two points to the midpoint.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Final Bounty</title>
      <link>https://willaltman.tech/final-bounty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/final-bounty/</guid>
      <description>&lt;img&#xD;&#xA;            title=&#34;image title&#34;&#xD;&#xA;            loading=&#34;lazy&#34;&#xD;&#xA;            decoding=&#34;async&#34;&#xD;&#xA;            class=&#34;img img-fluid img-center&#34;&#xD;&#xA;            width=&#34;320&#34;&#xD;&#xA;            height=&#34;400&#34;&#xD;&#xA;            src=&#34;https://willaltman.tech/images/final-bounty-icon-small_hu9855167771821798877.png&#34;&#xD;&#xA;            alt=&#34;Final Bounty logo&#34;&#xD;&#xA;            onerror=&#34;this.onerror=&#39;null&#39;;this.src=&#39;\/images\/final-bounty-icon-small_hu9855167771821798877.png&#39;&#34; /&gt;&#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &lt;script&gt;&#xD;&#xA;    window.addEventListener(&#34;load&#34;, (e) =&gt; {&#xD;&#xA;      const lightbox = GLightbox();&#xD;&#xA;    });&#xD;&#xA;  &lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xA;&lt;div style=&#34;text-align: center;&#34;&gt;&#xA;    &lt;p&gt;&#xA;&lt;p&gt;&lt;b&gt;Final Bounty&lt;/b&gt; is a sci-fi themed rougelike bullet hell game featuring procedurally generated levels, permadeath, and an exciting lineup of foes to exterminate. The player is a bounty hunter on the cusp of retirement who sets out on one last mission to secure their legacy. Traveling from planet to planet, they must vanquish enemies and collect supplies while they get ever closer to achieving their goal. Between planets, the player can purchase upgrades at the shopkeeper&amp;rsquo;s space station and choose their next battle. After conquering three solar systems, the only thing that stands between the player and collecting their final bounty is an exhilarating boss fight.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Italian Plumber World</title>
      <link>https://willaltman.tech/mario-game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/mario-game/</guid>
      <description>&lt;img&#xD;&#xA;            title=&#34;image title&#34;&#xD;&#xA;            loading=&#34;lazy&#34;&#xD;&#xA;            decoding=&#34;async&#34;&#xD;&#xA;            class=&#34;img img-fluid img-center&#34;&#xD;&#xA;            width=&#34;500&#34;&#xD;&#xA;            height=&#34;357&#34;&#xD;&#xA;            src=&#34;https://willaltman.tech/images/mario/mario-title-medium_hu5916981125788639326.png&#34;&#xD;&#xA;            alt=&#34;Italian Plumber World logo&#34;&#xD;&#xA;            onerror=&#34;this.onerror=&#39;null&#39;;this.src=&#39;\/images\/mario\/mario-title-medium_hu5916981125788639326.png&#39;&#34; /&gt;&#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &lt;script&gt;&#xD;&#xA;    window.addEventListener(&#34;load&#34;, (e) =&gt; {&#xD;&#xA;      const lightbox = GLightbox();&#xD;&#xA;    });&#xD;&#xA;  &lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xA;&lt;div style=&#34;text-align: center;&#34;&gt;&#xA;    &lt;p&gt;&#xA;&lt;p&gt;&lt;b&gt;Italian Plumber World&lt;/b&gt; is a game modeled after the classic Mario titles with a twist: two players compete in a head-to-head split-screen race to capture the other player&amp;rsquo;s base first. They will jump over obstacles, stomp on foes, collect power-ups, and battle each other until the bitter end! The first player to reach the other&amp;rsquo;s base without dying before time runs out wins!&lt;/p&gt;</description>
    </item>
    <item>
      <title>MODERN MEDICINE</title>
      <link>https://willaltman.tech/modern-medicine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/modern-medicine/</guid>
      <description>&lt;img&#xD;&#xA;            title=&#34;image title&#34;&#xD;&#xA;            loading=&#34;lazy&#34;&#xD;&#xA;            decoding=&#34;async&#34;&#xD;&#xA;            class=&#34;img img-fluid img-center&#34;&#xD;&#xA;            width=&#34;500&#34;&#xD;&#xA;            height=&#34;500&#34;&#xD;&#xA;            src=&#34;https://willaltman.tech/images/mm/pics/modern-medicine-icon-500x500_hu15799274415710924403.png&#34;&#xD;&#xA;            alt=&#34;MODERN MEDICINE logo&#34;&#xD;&#xA;            onerror=&#34;this.onerror=&#39;null&#39;;this.src=&#39;\/images\/mm\/pics\/modern-medicine-icon-500x500_hu15799274415710924403.png&#39;&#34; /&gt;&#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &lt;script&gt;&#xD;&#xA;    window.addEventListener(&#34;load&#34;, (e) =&gt; {&#xD;&#xA;      const lightbox = GLightbox();&#xD;&#xA;    });&#xD;&#xA;  &lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;      &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;          &lt;img&#xD;&#xA;            title=&#34;image title&#34;&#xD;&#xA;            loading=&#34;lazy&#34;&#xD;&#xA;            decoding=&#34;async&#34;&#xD;&#xA;            class=&#34;img img-fluid img-center&#34;&#xD;&#xA;            width=&#34;800&#34;&#xD;&#xA;            height=&#34;203&#34;&#xD;&#xA;            src=&#34;https://willaltman.tech/images/mm/pics/prizm-logo-darkbg_hu4222470244829007302.png&#34;&#xD;&#xA;            alt=&#34;PRIZM GAMES logo&#34;&#xD;&#xA;            onerror=&#34;this.onerror=&#39;null&#39;;this.src=&#39;\/images\/mm\/pics\/prizm-logo-darkbg_hu4222470244829007302.png&#39;&#34; /&gt;&#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xA;&lt;br/&gt;&#xD;&#xA;&lt;br/&gt;&#xD;&#xA;&lt;div style=&#34;text-align: center;&#34;&gt;&#xD;&#xA;    &lt;p&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;MODERN MEDICINE&lt;/strong&gt; is a procedurally generated cross platform multiplayer horror adventure with a branching storyline that was released on Roblox in 2024. It has reached over &lt;strong&gt;1,000,000 play sessions&lt;/strong&gt; and over &lt;strong&gt;400,000 unique players&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MODERN MEDICINE</title>
      <link>https://willaltman.tech/modern-medicine-OLD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/modern-medicine-OLD/</guid>
      <description>&lt;img&#xD;&#xA;            title=&#34;image title&#34;&#xD;&#xA;            loading=&#34;lazy&#34;&#xD;&#xA;            decoding=&#34;async&#34;&#xD;&#xA;            class=&#34;img img-fluid img-center&#34;&#xD;&#xA;            width=&#34;500&#34;&#xD;&#xA;            height=&#34;500&#34;&#xD;&#xA;            src=&#34;https://willaltman.tech/images/mm/pics/modern-medicine-icon-500x500_hu15799274415710924403.png&#34;&#xD;&#xA;            alt=&#34;MODERN MEDICINE logo&#34;&#xD;&#xA;            onerror=&#34;this.onerror=&#39;null&#39;;this.src=&#39;\/images\/mm\/pics\/modern-medicine-icon-500x500_hu15799274415710924403.png&#39;&#34; /&gt;&#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &lt;script&gt;&#xD;&#xA;    window.addEventListener(&#34;load&#34;, (e) =&gt; {&#xD;&#xA;      const lightbox = GLightbox();&#xD;&#xA;    });&#xD;&#xA;  &lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;      &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;          &lt;img&#xD;&#xA;            title=&#34;image title&#34;&#xD;&#xA;            loading=&#34;lazy&#34;&#xD;&#xA;            decoding=&#34;async&#34;&#xD;&#xA;            class=&#34;img img-fluid img-center&#34;&#xD;&#xA;            width=&#34;800&#34;&#xD;&#xA;            height=&#34;203&#34;&#xD;&#xA;            src=&#34;https://willaltman.tech/images/mm/pics/prizm-logo-darkmode_hu2311216746607895772.png&#34;&#xD;&#xA;            alt=&#34;PRIZM GAMES logo&#34;&#xD;&#xA;            onerror=&#34;this.onerror=&#39;null&#39;;this.src=&#39;\/images\/mm\/pics\/prizm-logo-darkmode_hu2311216746607895772.png&#39;&#34; /&gt;&#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xA;&lt;br/&gt;&#xD;&#xA;&lt;br/&gt;&#xD;&#xA;&lt;div style=&#34;text-align: center;&#34;&gt;&#xD;&#xA;    &lt;p&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;MODERN MEDICINE&lt;/strong&gt; is a procedurally generated cross platform multiplayer horror adventure with a branching storyline that was released on Roblox in 2024. It has reached over &lt;strong&gt;980,000 play sessions&lt;/strong&gt; and over &lt;strong&gt;400,000 unique players&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MODERN MEDICINE AI</title>
      <link>https://willaltman.tech/modern-medicine/ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/modern-medicine/ai/</guid>
      <description>&lt;h3 id=&#34;ai&#34;&gt;AI&lt;/h3&gt;&#xA;&lt;p&gt;There are many unique AI agents in MODERN MEDICINE. The below section is a summary of what they are and what they do. The section after that describes core systems and gives implementation examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MODERN MEDICINE BACKEND</title>
      <link>https://willaltman.tech/modern-medicine/backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/modern-medicine/backend/</guid>
      <description>&lt;h3 id=&#34;backend&#34;&gt;Backend&lt;/h3&gt;&#xA;&lt;p&gt;The core of the backend system uses &lt;a href=&#34;https://madstudioroblox.github.io/ProfileService/&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;ProfileService&lt;/a&gt; which is an extension module for DataStores. ProfileService is a is a profile object abstraction seperated from the Player instance which streamlines datastore implementation and handles lots of edge cases such as providing protection against item duplication exploits.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MODERN MEDICINE GUI &amp; PLAYER SYSTEMS</title>
      <link>https://willaltman.tech/modern-medicine/gui-player/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/modern-medicine/gui-player/</guid>
      <description>&lt;h3 id=&#34;gui--player-systems&#34;&gt;GUI &amp;amp; PLAYER SYSTEMS&lt;/h3&gt;&#xA;&lt;h5 id=&#34;clipboard&#34;&gt;CLIPBOARD&lt;/h5&gt;&#xA;&lt;p&gt;The player&amp;rsquo;s HUD went through many iterations throughout the course of the game. For most of development, objectives were permanently displayed in corner of the screen and other information was available through a gui shaped like a clipboard. This combined with dialogue, hotbar, and other visual elements made the screen feel very cluttered. To fix this and increase immersion, I moved many of these gui elements onto a physical clipboard that the player can equip at any time. The result is a clean feeling user interface, with the only permanent element being the player&amp;rsquo;s hotbar and some occasional elements appearing for dialogue and new objectives.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MODERN MEDICINE Infrastructure &amp; Tools</title>
      <link>https://willaltman.tech/modern-medicine/infra-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/modern-medicine/infra-tools/</guid>
      <description>&lt;h3 id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h3&gt;&#xA;&lt;h5 id=&#34;open-source-libraries&#34;&gt;Open Source Libraries&lt;/h5&gt;&#xA;&lt;p&gt;One of the first challenges I encountered while developing MODERN MEDICINE was deciding how to organize the code. After researching possible frameworks, I decided on using &lt;a href=&#34;https://sleitnick.github.io/Knit/docs/intro/&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Knit&lt;/a&gt; in order to simplify communication across the client-server boundary and to take advantage of its built in structure with services and controllers. I also use &lt;a href=&#34;https://rojo.space/&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Rojo&lt;/a&gt; as part of my workflow in order to program in VSCode instead of the Roblox editor and to make version control with github easier.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MODERN MEDICINE Procedural Generation</title>
      <link>https://willaltman.tech/modern-medicine/procedural-generation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/modern-medicine/procedural-generation/</guid>
      <description>&lt;h3 id=&#34;procedural-generation&#34;&gt;Procedural Generation&lt;/h3&gt;&#xA;&lt;h6 id=&#34;1-representing-the-world&#34;&gt;1. Representing the world&lt;/h6&gt;&#xA;&lt;p&gt;One thing that hasn&amp;rsquo;t changed much since its initial prototype is how the world is abstractly represented in code. The level is stored in an n x m array of nodes, with each node containing information about what exists in that location (e.g. is this a room, hallway, doorway, what biome is this, etc&amp;hellip;). Nodes also store a reference to their neighbors, creating a graph. Being able to look up nodes in both an array or explore nodes as a graph provides important flexibility in how the game interacts with the world since many corners of the code base use this core system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebGL Engine</title>
      <link>https://willaltman.tech/webgl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://willaltman.tech/webgl/</guid>
      <description>&lt;img&#xD;&#xA;            title=&#34;image title&#34;&#xD;&#xA;            loading=&#34;lazy&#34;&#xD;&#xA;            decoding=&#34;async&#34;&#xD;&#xA;            class=&#34;img img-fluid img-center&#34;&#xD;&#xA;            width=&#34;384&#34;&#xD;&#xA;            height=&#34;161&#34;&#xD;&#xA;            src=&#34;https://willaltman.tech/images/webgl-logo-small_hu17218267330284642464.png&#34;&#xD;&#xA;            alt=&#34;WebGL logo&#34;&#xD;&#xA;            onerror=&#34;this.onerror=&#39;null&#39;;this.src=&#39;\/images\/webgl-logo-small_hu17218267330284642464.png&#39;&#34; /&gt;&#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &lt;script&gt;&#xD;&#xA;    window.addEventListener(&#34;load&#34;, (e) =&gt; {&#xD;&#xA;      const lightbox = GLightbox();&#xD;&#xA;    });&#xD;&#xA;  &lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xA;&lt;div style=&#34;text-align: center;&#34;&gt;&#xA;    &lt;p&gt;&#xA;&lt;p&gt;WebGL is a JavaScript API used to render 2D and 3D interactive graphics directly within a web browser. I have built an optimized framework with WebGL that supports transformations, lighting, texture mapping, and more. By utilizing WebGL to interface with the OpenGL ES Shading Language (similar C/C++ and made for graphics programming) and JavaScript for core logic, the framework achieves high performance and flexibility in rendering real-time graphics.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
